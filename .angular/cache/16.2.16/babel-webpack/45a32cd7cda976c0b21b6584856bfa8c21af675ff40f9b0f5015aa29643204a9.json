{"ast":null,"code":"var _a;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { DashboardService } from './dashboard.service';\nimport { FormBuilder } from '@angular/forms';\nexport let DashboardComponent = class DashboardComponent {\n  constructor(dashboardService, fb) {\n    this.dashboardService = dashboardService;\n    this.fb = fb;\n    this.bookings = [];\n    this.services = [];\n    this.products = [];\n    this.barbers = [];\n    this.page = 1;\n    this.pageSize = 10;\n    this.loading = false;\n    this.hasMore = true;\n    // Summary Stats\n    this.totalIncome = 0;\n    this.totalProductCost = 0;\n    this.totalCommission = 0;\n    this.filterForm = this.fb.group({\n      fromDate: [''],\n      toDate: [''],\n      barber: ['']\n    });\n  }\n  ngOnInit() {\n    this.loadInitialData();\n    this.loadBookings();\n  }\n  loadInitialData() {\n    this.dashboardService.getServices().subscribe(res => this.services = res);\n    this.dashboardService.getProducts().subscribe(res => this.products = res);\n    this.dashboardService.getBarbers().subscribe(res => this.barbers = res);\n  }\n  loadBookings() {\n    if (this.loading || !this.hasMore) return;\n    this.loading = true;\n    const filters = this.filterForm.value;\n    this.dashboardService.getBookings(this.page, this.pageSize, filters).subscribe(res => {\n      const mapped = res.map(b => ({\n        ...b,\n        serviceNames: b.selectedServices.map(id => {\n          const s = this.services.find(s => s._id === id);\n          return s ? s.serviceName : id;\n        }),\n        productNames: b.selectedProducts.map(id => {\n          const p = this.products.find(p => p._id === id);\n          return p ? p.productName : id;\n        }),\n        barberName: this.barbers.find(bbr => bbr._id === b.barber)?.name || 'Unknown'\n      }));\n      this.bookings = [...this.bookings, ...mapped];\n      if (res.length < this.pageSize) this.hasMore = false;else this.page++;\n      this.calculateSummary();\n      this.loading = false;\n    });\n  }\n  applyFilters() {\n    this.page = 1;\n    this.bookings = [];\n    this.hasMore = true;\n    this.loadBookings();\n  }\n  calculateSummary() {\n    this.totalIncome = this.bookings.reduce((sum, b) => sum + b.serviceAmount, 0);\n    this.totalProductCost = this.bookings.reduce((sum, b) => sum + (b.totalProductAmount || 0), 0);\n    // 50% of serviceAmount - productCost (only if product used)\n    this.totalCommission = this.bookings.reduce((sum, b) => {\n      const productCost = b.totalProductAmount || 0;\n      return sum + Math.max((b.serviceAmount - productCost) * 0.5, 0);\n    }, 0);\n  }\n  loadMore() {\n    this.loadBookings();\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof DashboardService !== \"undefined\" && DashboardService) === \"function\" ? _a : Object, FormBuilder])], DashboardComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}