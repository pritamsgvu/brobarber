{"ast":null,"code":"import { DashboardService } from '../../services/dashboard.service';\nimport { FormBuilder } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/dashboard.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction DashboardComponent_option_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const b_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", b_r3._id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(b_r3.name);\n  }\n}\nfunction DashboardComponent_tr_49_li_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const s_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(s_r7);\n  }\n}\nfunction DashboardComponent_tr_49_li_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const p_r8 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(p_r8);\n  }\n}\nfunction DashboardComponent_tr_49_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\")(7, \"ul\");\n    i0.ɵɵtemplate(8, DashboardComponent_tr_49_li_8_Template, 2, 1, \"li\", 11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"td\")(10, \"ul\");\n    i0.ɵɵtemplate(11, DashboardComponent_tr_49_li_11_Template, 2, 1, \"li\", 11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"td\");\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"td\");\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"td\");\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"td\");\n    i0.ɵɵtext(19);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const txn_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(3, 8, txn_r4.date, \"dd/MM/yyyy\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(txn_r4.barberName);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", txn_r4.serviceNames);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", txn_r4.productNames);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(txn_r4.serviceAmount);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(txn_r4.totalProductAmount);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(txn_r4.serviceAmount + txn_r4.totalProductAmount);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(txn_r4.paymentMode);\n  }\n}\nfunction DashboardComponent_button_50_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_button_50_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.loadMore());\n    });\n    i0.ɵɵtext(1, \"Load More\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor(dashboardService, fb) {\n      this.dashboardService = dashboardService;\n      this.fb = fb;\n      this.bookings = [];\n      this.filteredTransactions = [];\n      this.barberCommission = [];\n      this.services = [];\n      this.products = [];\n      this.barbers = [];\n      this.incomeStats = [];\n      this.page = 1;\n      this.pageSize = 10;\n      this.hasMore = true;\n      this.totalIncome = 0;\n      this.totalProductCost = 0;\n    }\n    ngOnInit() {\n      this.initForm();\n      this.loadInitialData();\n      this.loadBookings();\n    }\n    // Initialize filter form\n    initForm() {\n      this.filterForm = this.fb.group({\n        fromDate: [''],\n        toDate: [''],\n        barber: ['']\n      });\n    }\n    // Load initial data like services, products, barbers\n    loadInitialData() {\n      this.dashboardService.getServices().subscribe(data => this.services = data);\n      this.dashboardService.getProducts().subscribe(data => this.products = data);\n      this.dashboardService.getBarbers().subscribe(data => this.barbers = data);\n    }\n    // Load bookings with pagination and filters applied\n    loadBookings(reset = false) {\n      if (reset) {\n        this.page = 1;\n        this.bookings = [];\n      }\n      const filters = this.filterForm.value;\n      this.dashboardService.getBookings(this.page, this.pageSize, filters).subscribe(data => {\n        if (data.length < this.pageSize) this.hasMore = false;\n        this.bookings = [...this.bookings, ...data];\n        this.processData();\n        this.page++;\n      });\n    }\n    // Process data to get services, products, and barber names\n    processData() {\n      this.filteredTransactions = this.bookings.map(tx => {\n        const serviceNames = tx.selectedServices.map(id => {\n          const s = this.services.find(serv => serv._id === id);\n          return s ? s.serviceName : id;\n        });\n        const productNames = tx.selectedProducts.map(id => {\n          const p = this.products.find(prod => prod._id === id);\n          return p ? p.productName : id;\n        });\n        const barber = this.barbers.find(b => b._id === tx.barber);\n        return {\n          ...tx,\n          serviceNames,\n          productNames,\n          barberName: barber ? barber.name : 'Unknown'\n        };\n      });\n      this.generateStats();\n    }\n    // Generate statistics for income, product cost, and commissions\n    generateStats() {\n      const incomeMap = {};\n      const commissionMap = {};\n      let productCost = 0;\n      const fromDate = this.filterForm.value.fromDate ? new Date(this.filterForm.value.fromDate) : null;\n      const toDate = this.filterForm.value.toDate ? new Date(this.filterForm.value.toDate) : null;\n      this.filteredTransactions.forEach(tx => {\n        const txDate = new Date(tx.date);\n        if (fromDate && txDate < fromDate) return;\n        if (toDate && txDate > toDate) return;\n        const name = tx.barberName;\n        if (!incomeMap[name]) {\n          incomeMap[name] = 0;\n          commissionMap[name] = 0;\n        }\n        const serviceAmount = tx.serviceAmount || 0;\n        const productAmount = tx.totalProductAmount || 0;\n        incomeMap[name] += serviceAmount;\n        commissionMap[name] += (serviceAmount - productAmount) * 0.5;\n        productCost += productAmount;\n      });\n      // this.totalIncome = Object.values(incomeMap).reduce((acc: number, val: number) => acc + val, 0);\n      this.totalProductCost = productCost;\n      this.incomeStats = Object.keys(incomeMap).map(name => ({\n        barberName: name,\n        amount: incomeMap[name]\n      }));\n      this.barberCommission = Object.keys(commissionMap).map(name => ({\n        barberName: name,\n        commission: commissionMap[name]\n      }));\n    }\n    // Load more data (lazy load)\n    loadMore() {\n      if (this.hasMore) {\n        this.loadBookings();\n      }\n    }\n    // Apply filters and reset bookings data\n    applyFilters() {\n      this.page = 1;\n      this.bookings = [];\n      this.hasMore = true;\n      this.loadBookings(true);\n    }\n    // Reset filters\n    resetFilter() {\n      this.filterForm.reset();\n      this.applyFilters();\n    }\n    // Get barber name from barber ID\n    getBarberName(barberId) {\n      const barber = this.barbers.find(b => b._id === barberId);\n      return barber ? barber.name : 'Unknown';\n    }\n    static {\n      this.ɵfac = function DashboardComponent_Factory(t) {\n        return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.DashboardService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: DashboardComponent,\n        selectors: [[\"app-dashboard\"]],\n        decls: 51,\n        vars: 12,\n        consts: [[1, \"dashboard-container\"], [1, \"filter-form\", 3, \"formGroup\", \"ngSubmit\"], [\"type\", \"date\", \"formControlName\", \"fromDate\"], [\"type\", \"date\", \"formControlName\", \"toDate\"], [\"formControlName\", \"barber\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\"], [1, \"summary-cards\"], [1, \"card\"], [1, \"table-wrapper\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"load-more\", 3, \"click\", 4, \"ngIf\"], [3, \"value\"], [1, \"load-more\", 3, \"click\"]],\n        template: function DashboardComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n            i0.ɵɵtext(2, \"Transaction Dashboard\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtext(3);\n            i0.ɵɵpipe(4, \"json\");\n            i0.ɵɵelementStart(5, \"form\", 1);\n            i0.ɵɵlistener(\"ngSubmit\", function DashboardComponent_Template_form_ngSubmit_5_listener() {\n              return ctx.applyFilters();\n            });\n            i0.ɵɵelementStart(6, \"label\");\n            i0.ɵɵtext(7, \" From: \");\n            i0.ɵɵelement(8, \"input\", 2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(9, \"label\");\n            i0.ɵɵtext(10, \" To: \");\n            i0.ɵɵelement(11, \"input\", 3);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(12, \"label\");\n            i0.ɵɵtext(13, \" Barber: \");\n            i0.ɵɵelementStart(14, \"select\", 4)(15, \"option\", 5);\n            i0.ɵɵtext(16, \"All\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(17, DashboardComponent_option_17_Template, 2, 2, \"option\", 6);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(18, \"button\", 7);\n            i0.ɵɵtext(19, \"Apply\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(20, \"div\", 8)(21, \"div\", 9);\n            i0.ɵɵtext(22);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(23, \"div\", 9);\n            i0.ɵɵtext(24);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(25, \"div\", 9);\n            i0.ɵɵtext(26);\n            i0.ɵɵpipe(27, \"json\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(28, \"div\", 10)(29, \"table\")(30, \"thead\")(31, \"tr\")(32, \"th\");\n            i0.ɵɵtext(33, \"Date\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(34, \"th\");\n            i0.ɵɵtext(35, \"Barber\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(36, \"th\");\n            i0.ɵɵtext(37, \"Services\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(38, \"th\");\n            i0.ɵɵtext(39, \"Products\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(40, \"th\");\n            i0.ɵɵtext(41, \"Service \\u20B9\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(42, \"th\");\n            i0.ɵɵtext(43, \"Product \\u20B9\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(44, \"th\");\n            i0.ɵɵtext(45, \"Total \\u20B9\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(46, \"th\");\n            i0.ɵɵtext(47, \"Mode\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(48, \"tbody\");\n            i0.ɵɵtemplate(49, DashboardComponent_tr_49_Template, 20, 11, \"tr\", 11);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(50, DashboardComponent_button_50_Template, 2, 0, \"button\", 12);\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(3);\n            i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 8, ctx.barbers), \" \");\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"formGroup\", ctx.filterForm);\n            i0.ɵɵadvance(12);\n            i0.ɵɵproperty(\"ngForOf\", ctx.barbers);\n            i0.ɵɵadvance(5);\n            i0.ɵɵtextInterpolate1(\"Total Income: \\u20B9\", ctx.totalIncome, \"\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate1(\"Total Product Cost: \\u20B9\", ctx.totalProductCost, \"\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate1(\"Barber Commission (50%): \\u20B9\", i0.ɵɵpipeBind1(27, 10, ctx.barberCommission), \"\");\n            i0.ɵɵadvance(23);\n            i0.ɵɵproperty(\"ngForOf\", ctx.filteredTransactions);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.hasMore);\n          }\n        },\n        dependencies: [i3.NgForOf, i3.NgIf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i3.JsonPipe, i3.DatePipe],\n        styles: [\".dashboard-container[_ngcontent-%COMP%]{padding:1rem;font-family:Segoe UI,sans-serif}h2[_ngcontent-%COMP%]{margin-bottom:1rem;font-size:1.5rem}.filter-form[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap;gap:1rem;margin-bottom:1.5rem}.filter-form[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{display:flex;flex-direction:column;font-size:.9rem}.filter-form[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .filter-form[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]{padding:4px 6px;font-size:.9rem;margin-top:.25rem;border:1px solid #ccc;border-radius:4px}.filter-form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{padding:6px 12px;font-size:.9rem;cursor:pointer;border:none;background-color:#2d7dd2;color:#fff;border-radius:4px}.summary-cards[_ngcontent-%COMP%]{display:flex;gap:1rem;flex-wrap:wrap;margin-bottom:1.5rem}.card[_ngcontent-%COMP%]{background-color:#f0f4f8;padding:1rem;border-radius:6px;box-shadow:0 1px 3px #0000001a;flex:1;min-width:150px}.table-wrapper[_ngcontent-%COMP%]{overflow-x:auto}table[_ngcontent-%COMP%]{width:100%;border-collapse:collapse;font-size:.9rem}th[_ngcontent-%COMP%], td[_ngcontent-%COMP%]{padding:8px 12px;border:1px solid #ccc;vertical-align:top}th[_ngcontent-%COMP%]{background-color:#f8f9fa;text-align:left}ul[_ngcontent-%COMP%]{margin:0;padding-left:1rem}.load-more[_ngcontent-%COMP%]{margin-top:1rem;padding:8px 16px;background-color:#333;color:#fff;border:none;border-radius:4px;cursor:pointer}@media (max-width: 768px){.filter-form[_ngcontent-%COMP%], .summary-cards[_ngcontent-%COMP%]{flex-direction:column}table[_ngcontent-%COMP%], thead[_ngcontent-%COMP%], tbody[_ngcontent-%COMP%], th[_ngcontent-%COMP%], td[_ngcontent-%COMP%], tr[_ngcontent-%COMP%]{font-size:.8rem}.load-more[_ngcontent-%COMP%]{width:100%}}\"]\n      });\n    }\n  }\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}