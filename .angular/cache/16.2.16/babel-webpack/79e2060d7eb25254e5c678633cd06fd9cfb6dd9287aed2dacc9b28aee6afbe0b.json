{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { BarberService } from '../../services/barber.service';\nimport { BookingService } from '../../services/booking.service';\nexport let BookingFormComponent = class BookingFormComponent {\n  constructor(fb, barberService, bookingService) {\n    this.fb = fb;\n    this.barberService = barberService;\n    this.bookingService = bookingService;\n    this.barbers = [];\n    this.services = [];\n    this.products = [];\n  }\n  ngOnInit() {\n    this.bookingForm = this.fb.group({\n      barber: ['', Validators.required],\n      date: ['', Validators.required],\n      selectedServices: [[]],\n      selectedProducts: [[]],\n      serviceAmount: ['', Validators.required],\n      paymentMode: ['cash', Validators.required]\n    });\n    this.loadBarbers();\n    this.loadServices();\n    this.loadProducts();\n  }\n  loadBarbers() {\n    this.barberService.getBarbers().subscribe(data => {\n      this.barbers = data;\n    });\n  }\n  loadServices() {\n    this.bookingService.getServices().subscribe(data => {\n      this.services = data;\n    });\n  }\n  loadProducts() {\n    this.bookingService.getProducts().subscribe(data => {\n      this.products = data;\n    });\n  }\n  toggleCheckbox(event, field) {\n    const formArray = this.bookingForm.get(field)?.value || [];\n    const value = event.target.value;\n    if (event.target.checked) {\n      // Add to array\n      this.bookingForm.get(field)?.setValue([...formArray, value]);\n    } else {\n      // Remove from array\n      const updatedArray = formArray.filter(item => item !== value);\n      this.bookingForm.get(field)?.setValue(updatedArray);\n    }\n    this.bookingForm.get(field)?.markAsDirty();\n  }\n  get selectedProducts() {\n    return this.bookingForm.get('selectedProducts');\n  }\n  toggleProductCheckbox(event, product) {\n    if (event.target.checked) {\n      this.selectedProducts.push(this.fb.group({\n        productId: [product._id],\n        productName: [product.productName],\n        perUsePrice: [product.perUsePrice]\n      }));\n    } else {\n      const index = this.selectedProducts.controls.findIndex(ctrl => ctrl.get('productId')?.value === product._id);\n      if (index !== -1) this.selectedProducts.removeAt(index);\n    }\n    this.updateTotalProductAmount();\n  }\n  getProductPrice(productId) {\n    const ctrl = this.selectedProducts.controls.find(ctrl => ctrl.get('productId')?.value === productId);\n    return ctrl ? ctrl.get('perUsePrice')?.value : '';\n  }\n  isProductSelected(productId) {\n    return this.selectedProducts.controls.some(ctrl => ctrl.get('productId')?.value === productId);\n  }\n  updateProductPrice(productId, newPrice) {\n    const control = this.selectedProducts.controls.find(ctrl => ctrl.get('productId')?.value === productId);\n    if (control) {\n      control.get('perUsePrice')?.setValue(Number(newPrice));\n      this.updateTotalProductAmount();\n    }\n  }\n  updateTotalProductAmount() {\n    const total = this.selectedProducts.controls.reduce((acc, ctrl) => {\n      return acc + Number(ctrl.get('perUsePrice')?.value || 0);\n    }, 0);\n    this.bookingForm.get('totalProductAmount')?.setValue(total);\n  }\n  onSubmit() {\n    if (this.bookingForm.valid) {\n      console.log('this.bookingForm.value', this.bookingForm.value);\n      this.bookingService.createBooking(this.bookingForm.value).subscribe(res => {\n        alert('Booking Created!');\n        // this.bookingForm.reset();\n      });\n    }\n  }\n};\n\nBookingFormComponent = __decorate([Component({\n  selector: 'app-booking-form',\n  templateUrl: './booking-form.component.html',\n  styleUrls: ['./booking-form.component.css']\n}), __metadata(\"design:paramtypes\", [FormBuilder, BarberService, BookingService])], BookingFormComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}