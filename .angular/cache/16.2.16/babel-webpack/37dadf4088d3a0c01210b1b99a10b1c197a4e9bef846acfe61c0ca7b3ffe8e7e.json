{"ast":null,"code":"import { DashboardService } from '../../services/dashboard.service';\nimport { FormBuilder } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/dashboard.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction DashboardComponent_tr_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const b_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(b_r1.barberName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 4, b_r1.date));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(b_r1.serviceAmount);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(b_r1.paymentMode);\n  }\n}\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor(dashboardService, fb) {\n      this.dashboardService = dashboardService;\n      this.fb = fb;\n      this.transactions = [];\n      this.servicesMap = new Map();\n      this.productsMap = new Map();\n      this.barbersMap = new Map();\n      this.limit = 10;\n      this.skip = 0;\n      this.hasMore = true;\n      this.summaryData = {};\n      this.filtersForm = this.fb.group({\n        dateFrom: [''],\n        dateTo: [''],\n        barber: ['']\n      });\n    }\n    ngOnInit() {\n      this.loadMetadata();\n      this.loadTransactions();\n    }\n    loadMetadata() {\n      this.dashboardService.getServices().subscribe(res => {\n        res.forEach(s => this.servicesMap.set(s._id, s.serviceName));\n      });\n      this.dashboardService.getProducts().subscribe(res => {\n        res.forEach(p => this.productsMap.set(p._id, p.productName));\n      });\n      this.dashboardService.getBarbers().subscribe(res => {\n        res.forEach(b => this.barbersMap.set(b._id, b.name));\n      });\n    }\n    loadTransactions() {\n      const {\n        dateFrom,\n        dateTo,\n        barber\n      } = this.filtersForm.value;\n      this.dashboardService.getTransactions(this.skip, this.limit, dateFrom, dateTo, barber).subscribe(res => {\n        this.transactions.push(...res);\n        this.skip += this.limit;\n        if (res.length < this.limit) this.hasMore = false;\n        this.calculateSummary();\n      });\n    }\n    loadMore() {\n      this.loadTransactions();\n    }\n    calculateSummary() {\n      const filtered = this.transactions;\n      const serviceIncome = filtered.reduce((sum, t) => sum + t.serviceAmount, 0);\n      const productCost = filtered.reduce((sum, t) => sum + (t.totalProductAmount || 0), 0);\n      const barberEarnings = {};\n      filtered.forEach(t => {\n        const barber = t.barber || 'Unknown';\n        if (!barberEarnings[barber]) barberEarnings[barber] = {\n          count: 0,\n          serviceAmount: 0,\n          productAmount: 0\n        };\n        barberEarnings[barber].count++;\n        barberEarnings[barber].serviceAmount += t.serviceAmount;\n        barberEarnings[barber].productAmount += t.totalProductAmount || 0;\n      });\n      this.summaryData = {\n        serviceIncome,\n        productCost,\n        netIncome: serviceIncome - productCost,\n        barberEarnings: Object.entries(barberEarnings).map(([key, val]) => ({\n          barber: this.barbersMap.get(key) || key,\n          ...val,\n          commission: ((val.serviceAmount - val.productAmount) * 0.5).toFixed(2)\n        }))\n      };\n    }\n    getServiceNames(ids) {\n      return ids.map(id => this.servicesMap.get(id) || id).join(', ');\n    }\n    getProductNames(ids) {\n      return ids.map(id => this.productsMap.get(id) || id).join(', ');\n    }\n    static {\n      this.ɵfac = function DashboardComponent_Factory(t) {\n        return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.DashboardService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: DashboardComponent,\n        selectors: [[\"app-dashboard\"]],\n        decls: 17,\n        vars: 1,\n        consts: [[4, \"ngFor\", \"ngForOf\"]],\n        template: function DashboardComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"h2\");\n            i0.ɵɵtext(1, \"Bookings Table\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(2, \"table\")(3, \"thead\")(4, \"tr\")(5, \"th\");\n            i0.ɵɵtext(6, \"Barber\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(7, \"th\");\n            i0.ɵɵtext(8, \"Date\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(9, \"th\");\n            i0.ɵɵtext(10, \"Amount\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(11, \"th\");\n            i0.ɵɵtext(12, \"Payment\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(13, \"tbody\");\n            i0.ɵɵtemplate(14, DashboardComponent_tr_14_Template, 10, 6, \"tr\", 0);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(15, \"h2\");\n            i0.ɵɵtext(16, \"Income Chart\");\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(14);\n            i0.ɵɵproperty(\"ngForOf\", ctx.bookings);\n          }\n        },\n        dependencies: [i3.NgForOf, i3.DatePipe]\n      });\n    }\n  }\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}