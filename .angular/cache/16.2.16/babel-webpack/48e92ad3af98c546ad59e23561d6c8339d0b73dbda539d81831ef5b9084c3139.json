{"ast":null,"code":"import { FormBuilder, Validators } from '@angular/forms';\nimport { BarberService } from '../../services/barber.service';\nimport { BookingService } from '../../services/booking.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/barber.service\";\nimport * as i3 from \"../../services/booking.service\";\nimport * as i4 from \"@angular/common\";\nfunction BookingFormComponent_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const barber_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", barber_r3._id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(barber_r3.name);\n  }\n}\nfunction BookingFormComponent_label_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"label\")(1, \"input\", 11);\n    i0.ɵɵlistener(\"change\", function BookingFormComponent_label_14_Template_input_change_1_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.toggleCheckbox($event, \"selectedServices\"));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const service_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", service_r4._id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", service_r4.serviceName, \" \");\n  }\n}\nfunction BookingFormComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"label\")(2, \"input\", 12);\n    i0.ɵɵlistener(\"change\", function BookingFormComponent_div_18_Template_input_change_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const product_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.toggleProductCheckbox($event, product_r7));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"input\", 13);\n    i0.ɵɵlistener(\"input\", function BookingFormComponent_div_18_Template_input_input_4_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const product_r7 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.updateProductPrice(product_r7._id, $event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const product_r7 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"checked\", ctx_r2.isProductSelected(product_r7._id));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", product_r7.productName, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", ctx_r2.getProductPrice(product_r7._id))(\"disabled\", !ctx_r2.isProductSelected(product_r7._id));\n  }\n}\nexport let BookingFormComponent = /*#__PURE__*/(() => {\n  class BookingFormComponent {\n    constructor(fb, barberService, bookingService) {\n      this.fb = fb;\n      this.barberService = barberService;\n      this.bookingService = bookingService;\n      this.barbers = [];\n      this.services = [];\n      this.products = [];\n      // here\n      this.totalProductPrice = 0;\n    }\n    ngOnInit() {\n      this.bookingForm = this.fb.group({\n        barber: ['', Validators.required],\n        date: ['', Validators.required],\n        selectedServices: [[]],\n        selectedProducts: [[]],\n        serviceAmount: ['', Validators.required],\n        paymentMode: ['cash', Validators.required],\n        totalProductAmount: [0] // Add this line to store the total product amount\n      });\n\n      this.loadBarbers();\n      this.loadServices();\n      this.loadProducts();\n    }\n    loadBarbers() {\n      this.barberService.getBarbers().subscribe(data => {\n        this.barbers = data;\n      });\n    }\n    loadServices() {\n      this.bookingService.getServices().subscribe(data => {\n        this.services = data;\n      });\n    }\n    loadProducts() {\n      this.bookingService.getProducts().subscribe(data => {\n        this.products = data;\n      });\n    }\n    toggleCheckbox(event, field) {\n      const formArray = this.bookingForm.get(field)?.value || [];\n      const value = event.target.value;\n      if (event.target.checked) {\n        // Add to array\n        this.bookingForm.get(field)?.setValue([...formArray, value]);\n      } else {\n        // Remove from array\n        const updatedArray = formArray.filter(item => item !== value);\n        this.bookingForm.get(field)?.setValue(updatedArray);\n      }\n      this.bookingForm.get(field)?.markAsDirty();\n    }\n    get selectedProducts() {\n      return this.bookingForm.get('selectedProducts');\n    }\n    toggleProductCheckbox(event, product) {\n      const selected = this.bookingForm.get('selectedProducts')?.value || [];\n      if (event.target.checked) {\n        selected.push({\n          ...product\n        }); // store full product object\n      } else {\n        const index = selected.findIndex(p => p._id === product._id);\n        if (index !== -1) selected.splice(index, 1);\n      }\n      this.bookingForm.get('selectedProducts')?.setValue([...selected]);\n      this.updateTotalProductAmount(); // Update the total product amount after selection\n    }\n\n    isProductSelected(productId) {\n      const selected = this.bookingForm.get('selectedProducts')?.value || [];\n      return selected.some(p => p._id === productId);\n    }\n    getProductPrice(productId) {\n      const selected = this.bookingForm.get('selectedProducts')?.value || [];\n      const product = selected.find(p => p._id === productId);\n      return product ? product.perUsePrice : 0;\n    }\n    updateProductPrice(productId, event) {\n      const value = parseFloat(event.target.value);\n      const selected = this.bookingForm.get('selectedProducts')?.value || [];\n      const index = selected.findIndex(p => p._id === productId);\n      if (index !== -1) {\n        selected[index].perUsePrice = value;\n        this.bookingForm.get('selectedProducts')?.setValue([...selected]);\n        this.updateTotalProductAmount(); // Update the total product amount after price update\n      }\n    }\n\n    updateTotalProductAmount() {\n      const selected = this.bookingForm.get('selectedProducts')?.value || [];\n      const totalAmount = selected.reduce((sum, p) => sum + (p.perUsePrice || 0), 0);\n      this.bookingForm.get('totalProductAmount')?.setValue(totalAmount); // Set the total product amount in the form\n      this.totalProductPrice = totalAmount;\n    }\n    onSubmit() {\n      if (this.bookingForm.valid) {\n        console.log('this.bookingForm.value', this.bookingForm.value);\n        this.bookingService.createBooking(this.bookingForm.value).subscribe(res => {\n          alert('Booking Created!');\n          // this.bookingForm.reset();\n        });\n      }\n    }\n\n    static {\n      this.ɵfac = function BookingFormComponent_Factory(t) {\n        return new (t || BookingFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.BarberService), i0.ɵɵdirectiveInject(i3.BookingService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: BookingFormComponent,\n        selectors: [[\"app-booking-form\"]],\n        decls: 36,\n        vars: 5,\n        consts: [[1, \"booking-form-container\"], [3, \"formGroup\", \"ngSubmit\"], [\"formControlName\", \"barber\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"date\", \"formControlName\", \"date\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"number\", \"formControlName\", \"serviceAmount\"], [\"type\", \"radio\", \"value\", \"cash\", \"formControlName\", \"paymentMode\"], [\"type\", \"radio\", \"value\", \"online\", \"formControlName\", \"paymentMode\"], [\"type\", \"submit\"], [3, \"value\"], [\"type\", \"checkbox\", 3, \"value\", \"change\"], [\"type\", \"checkbox\", 3, \"checked\", \"change\"], [\"type\", \"number\", \"placeholder\", \"Per use price\", 3, \"value\", \"disabled\", \"input\"]],\n        template: function BookingFormComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n            i0.ɵɵtext(2, \"Book an Appointment\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"form\", 1);\n            i0.ɵɵlistener(\"ngSubmit\", function BookingFormComponent_Template_form_ngSubmit_3_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(4, \"label\");\n            i0.ɵɵtext(5, \"Barber:\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"select\", 2);\n            i0.ɵɵtemplate(7, BookingFormComponent_option_7_Template, 2, 2, \"option\", 3);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(8, \"label\");\n            i0.ɵɵtext(9, \"Date:\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(10, \"input\", 4);\n            i0.ɵɵelementStart(11, \"fieldset\")(12, \"legend\");\n            i0.ɵɵtext(13, \"Services\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(14, BookingFormComponent_label_14_Template, 3, 2, \"label\", 5);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(15, \"fieldset\")(16, \"legend\");\n            i0.ɵɵtext(17, \"Products\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(18, BookingFormComponent_div_18_Template, 5, 4, \"div\", 5);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(19, \"p\")(20, \"strong\");\n            i0.ɵɵtext(21, \"Total Product Amount:\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtext(22);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(23, \"label\");\n            i0.ɵɵtext(24, \"Amount:\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(25, \"input\", 6);\n            i0.ɵɵelementStart(26, \"label\");\n            i0.ɵɵtext(27, \"Payment Mode:\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(28, \"label\");\n            i0.ɵɵelement(29, \"input\", 7);\n            i0.ɵɵtext(30, \" Cash\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(31, \"label\");\n            i0.ɵɵelement(32, \"input\", 8);\n            i0.ɵɵtext(33, \" Online\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(34, \"button\", 9);\n            i0.ɵɵtext(35, \"Submit Booking\");\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            let tmp_4_0;\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"formGroup\", ctx.bookingForm);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngForOf\", ctx.barbers);\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"ngForOf\", ctx.services);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngForOf\", ctx.products);\n            i0.ɵɵadvance(4);\n            i0.ɵɵtextInterpolate1(\" \", (tmp_4_0 = ctx.bookingForm.get(\"totalProductAmount\")) == null ? null : tmp_4_0.value, \"\");\n          }\n        },\n        dependencies: [i4.NgForOf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.SelectControlValueAccessor, i1.RadioControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n        styles: [\".booking-form[_ngcontent-%COMP%]{display:flex;flex-direction:column;max-width:100%;margin:20px auto;padding:20px;background-color:#f9f9f9;border-radius:8px;box-shadow:0 2px 8px #0000001a}fieldset[_ngcontent-%COMP%]{border:1px solid #ddd;padding:15px;border-radius:5px;margin-bottom:20px}legend[_ngcontent-%COMP%]{font-size:1.2rem;font-weight:700;padding:0 10px}label[_ngcontent-%COMP%]{display:block;font-size:.9rem;margin-bottom:10px}input[type=checkbox][_ngcontent-%COMP%]{margin-right:10px;transform:scale(1.2)}.service-list[_ngcontent-%COMP%], .product-list[_ngcontent-%COMP%]{display:grid;grid-template-columns:1fr;gap:10px;margin-bottom:20px}input[type=number][_ngcontent-%COMP%]{width:100%;max-width:120px;padding:8px;font-size:1rem;margin-top:10px;border:1px solid #ccc;border-radius:5px;box-sizing:border-box}input[type=number][_ngcontent-%COMP%]:disabled{background-color:#e9e9e9;cursor:not-allowed}input[type=checkbox][_ngcontent-%COMP%]:focus, input[type=number][_ngcontent-%COMP%]:focus{outline:none;border-color:#007bff}button[_ngcontent-%COMP%]{background-color:#28a745;color:#fff;padding:10px 15px;border:none;border-radius:5px;font-size:1rem;cursor:pointer;margin-top:20px}button[_ngcontent-%COMP%]:hover{background-color:#218838}@media (min-width: 600px){.service-list[_ngcontent-%COMP%], .product-list[_ngcontent-%COMP%]{grid-template-columns:repeat(auto-fill,minmax(250px,1fr))}input[type=number][_ngcontent-%COMP%]{max-width:150px}button[_ngcontent-%COMP%]{font-size:1.1rem}}@media (min-width: 768px){.booking-form[_ngcontent-%COMP%]{max-width:700px}}\"]\n      });\n    }\n  }\n  return BookingFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}